/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
 #DEFINE_CONSTANT MaxNumberOfDisplays 8
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
   #USER_SIMPLSHARP_LIBRARY "SCConfigLib"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
 DIGITAL_INPUT AddDisplay,RemoveDisplay,EditDisplay;
 ANALOG_INPUT DisplayToEdit,CommunicationType,Brand;
 STRING_INPUT DisplayName[64],IpAddress[64],Port[5],Output[2];
 STRING_INPUT DisplayBrands[10][64],DisplayCommType[2][64];
// BUFFER_INPUT 

 
 STRING_OUTPUT NumberOfDisplaysText;
        
 ANALOG_OUTPUT SelectedDisplayCommType,SelectedDisplayBrandAnalog;
 STRING_OUTPUT SelectedDisplayName,SelectedDisplayBrand,SelectedDisplayIpAddress,SelectedDisplayPort,SelectedDisplayOutput;

 STRING_OUTPUT DisplayNameText[MaxNumberOfDisplays],DisplayBrandText[MaxNumberOfDisplays],CommunicationsTypeText[MaxNumberOfDisplays],IpAddressText[MaxNumberOfDisplays];
 STRING_OUTPUT IpPortText[MaxNumberOfDisplays],OutputText[MaxNumberOfDisplays,MaxNumberOfDisplays];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
 INTEGER_PARAMETER NumberOfDisplays;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES NumberOfDisplays
    propValidUnits = unitDecimal;
    propDefaultUnit = unitDecimal;
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
INTEGER NumberOfDisplaysStore;
 STRING ipAddressStore[64],NameStore[64],PortStore[5],OutputStore[2];
               
DisplayConfigurationUpdater configUpdater;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
FUNCTION Initialize()
{
	configUpdater.Initialize(NumberOfDisplays);
	RegisterDelegate(configUpdater,UpdateDisplayInformation,UpdateDisplayInformationCallback);
	RegisterDelegate(configUpdater,UpdateCount,UpdateDisplayCountCallback);
	RegisterDelegate(configUpdater,UpdateSelectedItem,UpdateSelectedDisplayCallback);
}

callback FUNCTION UpdateSelectedDisplayCallback(Display information)
{
	Display tempDisplay;

	tempDisplay = information;

	SelectedDisplayName = tempDisplay.Name;
	SelectedDisplayBrand = DisplayBrands[tempDisplay.Manufacturer];
	SelectedDisplayBrandAnalog = tempDisplay.Manufacturer;
	SelectedDisplayCommType = tempDisplay.CommunicationsType;
	SelectedDisplayIpAddress = tempDisplay.IpAddress;
	SelectedDisplayPort = itoa(tempDisplay.Port);
	SelectedDisplayOutput = itoa(tempDisplay.Output);
}

callback FUNCTION UpdateDisplayInformationCallback(integer index, Display information)
{
	Display displayToShow;

	displayToShow = information;

	DisplayNameText[index] = displayToShow.Name;
	DisplayBrandText[index] = DisplayBrands[displayToShow.Manufacturer];
	CommunicationsTypeText[index] = DisplayCommType[displayToShow.CommunicationsType];
	IpAddressText[index] = displayToShow.IpAddress;
	IpPortText[index] = itoa(displayToShow.Port);
	OutputText[index] = itoa(displayToShow.Output);

}

callback FUNCTION UpdateDisplayCountCallback(integer count)
{
	NumberOfDisplaysText = ITOA(count);
	NumberOfDisplaysStore = count;
}

/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE DisplayToEdit
{
	if(DisplayToEdit <= NumberOfDisplaysStore)
	{
		configUpdater.GetDisplay(DisplayToEdit);
	}
}

    

PUSH AddDisplay
{
	Display displayToAdd;
                                         
	//trace("Name: %s\nBrand: %u\nCommType: %u\nIpAddress: %s\nIpPort: %s\nOutput: %s",DisplayName, Brand, CommunicationType,IpAddress,Port,Output);	

	displayToAdd.Name = DisplayName;
	displayToAdd.Manufacturer = Brand;
	displayToAdd.CommunicationsType = CommunicationType;
	displayToAdd.IpAddress = IpAddress;
	displayToAdd.Port = atoi(Port);
	displayToAdd.Output = atoi(Output);

	configUpdater.AddDisplay(displayToAdd);	
}

PUSH EditDisplay
{
	Display displayToUpdate;

	displayToUpdate.Name = NameStore;
	displayToUpdate.Manufacturer = Brand;
	displayToUpdate.CommunicationsType = CommunicationType;
	displayToUpdate.IpAddress = IpAddressStore;
	displayToUpdate.Port = atoi(PortStore);
	displayToUpdate.Output = atoi(OutputStore);

	configUpdater.UpdateDisplay(DisplayToEdit, displayToUpdate);
}

PUSH RemoveDisplay
{
	configUpdater.RemoveDisplay(DisplayToEdit);
}

Change DisplayName
{
	NameStore = DisplayName;
}

Change IpAddress
{
	IpAddressStore = IpAddress;
}

Change Port
{
	PortStore = Port;
}

Change Output
{
	OutputStore = Output;
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

     WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.

	Initialize();
}


