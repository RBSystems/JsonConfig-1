/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
 #DEFINE_CONSTANT MaxNumberOfSources 16
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
   #USER_SIMPLSHARP_LIBRARY "SC.SimplSharp.Utilities"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
 DIGITAL_INPUT  SaveChanges,AddSource,RemoveSource,EditSource;
 DIGITAL_INPUT EnableSource;
 ANALOG_INPUT SourceToEdit;
 STRING_INPUT SourceName[64],InputNumber[2];
// BUFFER_INPUT 

 
 ANALOG_OUTPUT NumberOfSourcesAnalog;
 STRING_OUTPUT NumberOfSourcesText;

 ANALOG_OUTPUT NumberOfEnabledSources;
        
 DIGITAL_OUTPUT SelectedSourceEnabled;
 STRING_OUTPUT SelectedSourceName,SelectedSourceInput;
                                
 DIGITAL_OUTPUT SourceEnabled[MaxNumberOfSources];
 ANALOG_OUTPUT InputAnalog[MaxNumberOfSources];
 STRING_OUTPUT SourceNameText[MaxNumberOfSources],SourceInputText[MaxNumberOfSources];
 DIGITAL_OUTPUT UiSourceEnabled[MaxNumberofSources];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
 STRING NameStore[64],InputStore[2];              
SourceConfigurationUpdater configUpdater;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
FUNCTION Initialize()
{
	configUpdater.Initialize(MaxNumberOfSources);
	RegisterDelegate(configUpdater,UpdateSourceInformation,UpdateSourceInformationCallback);
	RegisterDelegate(configUpdater,UpdateSourceCount,UpdateSourceCountCallback);
	RegisterDelegate(configUpdater,UpdateSelectedSource,UpdateSelectedSourceCallback);
	RegisterDelegate(configUpdater,UpdateSourceEnabledCount,UpdateSourceEnabledCountCallback);
}

callback FUNCTION UpdateSourceEnabledCountCallback(integer count)
{
	Integer tempCount;

	tempCount = count;

	NumberOfEnabledSources = tempCount;
}

callback FUNCTION UpdateSelectedSourceCallback(Source information)
{
	Source tempSource;

	tempSource = information;
	SelectedSourceName = tempsource.Name;	
	SelectedSourceEnabled = tempsource.Enabled;
	SelectedSourceInput = itoa(tempsource.Input);
}

callback FUNCTION UpdateSourceInformationCallback(integer index, Source information)
{
	integer tempIndex;
	Source SourceToShow;
    
	tempIndex = index;
	SourceToShow = information;
                  
	SourceNameText[tempindex] = SourceToShow.Name;
	UiSourceEnabled[tempindex] = SourceToShow.Enabled;
	SourceInputText[tempindex] = itoa(SourceToShow.Input);
	
	SourceEnabled[tempindex] = SourceToShow.Enabled;
	InputAnalog[tempindex] = SourceToShow.Input;
}

callback FUNCTION UpdateSourceCountCallback(integer count)
{
	integer tempCount;
    integer i;
	tempCount = count;

	NumberOfSourcesAnalog = tempcount;
	NumberOfSourcesText = ITOA(tempcount);

	if(tempCount = 1)
	{
		for(i = 1 to MaxNumberOfSources)
		{
			SourceEnabled[i] = 0;
			UiSourceEnabled[i] = 0;
		}
	}
}

/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE SourceToEdit
{
	if(SourceToEdit <= NumberOfSourcesAnalog)
	{
		configUpdater.GetSource(SourceToEdit);
	}
}

    

PUSH AddSource
{
	Source SourceToAdd;

	SourceToAdd.Name = SourceName;
	SourceToAdd.Enabled = EnableSource;
	SourceToAdd.Input = atoi(InputStore);

	configUpdater.AddSource(SourceToAdd);	
}

PUSH EditSource
{
	Source SourceToUpdate;

	SourceToUpdate.Name = NameStore;
	SourceToUpdate.Enabled = EnableSource;
	SourceToUpdate.Input = atoi(InputStore);

	configUpdater.UpdateSource(SourceToEdit, SourceToUpdate);
}

PUSH SaveChanges
{
 	configUpdater.SaveSourceConfiguration();   
}

PUSH RemoveSource
{
	configUpdater.RemoveSource(SourceToEdit);

	UiSourceEnabled[SourceToEdit] = 0;
	SourceEnabled[SourceToEdit] = 0;
}

Change SourceName
{
	NameStore = SourceName;
}

Change InputNumber
{
	InputStore = InputNumber;
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

     WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.

	Initialize();
}


