/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
 #DEFINE_CONSTANT MaxNumberOfCameras 4
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
   #USER_SIMPLSHARP_LIBRARY "SCConfigLib"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
 DIGITAL_INPUT  AddCamera,RemoveCamera,EditCamera;
 ANALOG_INPUT CameraToEdit,ControlType,Brand;
 STRING_INPUT CameraName[64],IpAddress[64],Port[5],Input[2];
 STRING_INPUT CameraBrands[4][64],CameraControlType[3][64];

 
 ANALOG_OUTPUT NumberOfCamerasAnalog;
 STRING_OUTPUT NumberOfCamerasText;
        
 ANALOG_OUTPUT SelectedCameraControlType,SelectedCameraBrandAnalog;
 STRING_OUTPUT SelectedCameraName,SelectedCameraBrand,SelectedCameraIpAddress,SelectedCameraPort,SelectedCameraOutput;

 STRING_OUTPUT CameraNameText[MaxNumberOfCameras],CameraBrandText[MaxNumberOfCameras],ControlTypeText[MaxNumberOfCameras],IpAddressText[MaxNumberOfCameras];
 STRING_OUTPUT IpPortText[MaxNumberOfCameras],InputText[MaxNumberOfCameras,MaxNumberOfCameras];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
 STRING ipAddressStore[64],NameStore[64],PortStore[5],InputStore[2];
               
CameraConfigurationUpdater configUpdater;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
FUNCTION Initialize()
{
	configUpdater.SetMaxCount(MaxNumberOfCameras);
	RegisterDelegate(configUpdater,UpdateCameraInformation,UpdateCameraInformationCallback);
	RegisterDelegate(configUpdater,UpdateCount,UpdateCameraCountCallback);
	RegisterDelegate(configUpdater,UpdateSelectedItem,UpdateSelectedCameraCallback);
}

callback FUNCTION UpdateSelectedCameraCallback(Camera information)
{
	Camera tempCamera;

	tempCamera = information;

	SelectedCameraName = tempCamera.Name;
	SelectedCameraBrand = CameraBrands[tempCamera.Manufacturer];
	SelectedCameraControlType = tempCamera.ControlType;
	SelectedCameraIpAddress = tempCamera.ControlIpAddress;
	SelectedCameraPort = itoa(tempCamera.ControlPort);
	SelectedCameraOutput = itoa(tempCamera.Input);
}

callback FUNCTION UpdateCameraInformationCallback(integer index, Camera information)
{
	Camera CameraToShow;
    
	trace("updating camera information. Index %u", index);

	CameraToShow = information;
    
	CameraNameText[index] = CameraToShow.Name;
	CameraBrandText[index] = CameraBrands[CameraToShow.Manufacturer];
	ControlTypeText[index] = CameraControlType[CameraToShow.ControlType];
	IpAddressText[index] = CameraToShow.ControlIpAddress;
	IpPortText[index] = itoa(CameraToShow.ControlPort);
	InputText[index] = itoa(CameraToShow.Input);
}

callback FUNCTION UpdateCameraCountCallback(integer count)
{
	NumberOfCamerasAnalog = count;
	NumberOfCamerasText = ITOA(count);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE CameraToEdit
{
	if(CameraToEdit <= NumberOfCamerasAnalog && CameraToEdit > 0)
	{
		configUpdater.GetCamera(CameraToEdit);
	}
}    

PUSH AddCamera
{
	Camera CameraToAdd;                                        

	CameraToAdd.Name = CameraName;
	CameraToAdd.Manufacturer = Brand;
	CameraToAdd.ControlType = ControlType;
	CameraToAdd.ControlIpAddress = IpAddress;
	CameraToAdd.ControlPort = atoi(Port);
	CameraToAdd.Input = atoi(Input);

	configUpdater.AddCamera(CameraToAdd);	
}

PUSH EditCamera
{
	Camera CameraToUpdate;

	CameraToUpdate.Name = NameStore;
	CameraToUpdate.Manufacturer = Brand;
	CameraToUpdate.ControlType = ControlType;
	CameraToUpdate.ControlIpAddress = IpAddressStore;
	CameraToUpdate.ControlPort = atoi(PortStore);
	CameraToUpdate.Input = atoi(InputStore);

	configUpdater.UpdateCamera(CameraToEdit, CameraToUpdate);
}

PUSH RemoveCamera
{
	configUpdater.RemoveCamera(CameraToEdit);
}

Change CameraName
{
	NameStore = CameraName;
	SelectedCameraName = CameraName;
}

Change ControlType
{
	SelectedCameraControlType = ControlType;
}

Change Brand
{
	SelectedCameraBrandAnalog = Brand;
	SelectedCameraBrand = CameraBrands[Brand];
}

Change IpAddress
{
	IpAddressStore = IpAddress;
	SelectedCameraIpAddress = IpAddress;
}

Change Port
{
	PortStore = Port;
	SelectedCameraPort = Port;
}

Change Input
{
	InputStore = Input;
	SelectedCameraOutput = Input;
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
     WaitForInitializationComplete();
	Initialize();
}


